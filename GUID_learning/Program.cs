using System;

namespace GUID_learning
{
    internal class Program
    {
        public string name
        {
            get => name;
            set => name = value ?? throw new ArgumentNullException(nameof(value), "Name cannot be null");
            //if left side of question mark is null, it will evulate right side.
        }
        public static void Main(string[] args)
        {


            int[] array = new int[5];
            Console.WriteLine(array.GetType());
            int[] array2 = null;
            Console.WriteLine(array2?.GetType());

            int? a = null;
            int? b = 1;
            Console.WriteLine(a);
            Console.WriteLine(b);
            int? c = a ?? b;
            Console.WriteLine(c);


            
            Guid idEmpty = new Guid();
            if(idEmpty == Guid.Empty)
                Console.WriteLine("The Guid is empty");
            
            Guid g = Guid.NewGuid();
            Console.WriteLine(g);
            Console.WriteLine(Guid.NewGuid());
            bool isGUID = Guid.TryParse(g.ToString(), out _);
            Console.WriteLine($"Is g generated by GUID()? {isGUID} ");
            
            var testGuid = Guid.NewGuid();
            // Create an array of string representations of the GUID.
            string[] stringGuids = { testGuid.ToString("B"),
                testGuid.ToString("D"),
                testGuid.ToString("X") };

            // Parse each string representation.
            foreach (var stringGuid in stringGuids)
            {
                try
                {
                    Guid newGuid = Guid.Parse(stringGuid);
                    Console.WriteLine($"Converted {stringGuid} to a Guid");
                }
                catch (ArgumentNullException)
                {
                    Console.WriteLine("The string to be parsed is null.");
                }
                catch (FormatException)
                {
                    Console.WriteLine($"Bad format: {stringGuid}");
                }
            }

        
        }
    }
}